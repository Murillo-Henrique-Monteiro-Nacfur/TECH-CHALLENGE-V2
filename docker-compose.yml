version: '3.8'

services:
  # PostgreSQL
  postgres-db:
    image: postgres:15-alpine
    container_name: postgres-db
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./postgres-init:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U application -d hospital"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - hospital-network

  # Autenticação
  authentication-api:
    build:
      context: .
      dockerfile: Dockerfile.authentication-api
    container_name: authentication-api
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - DATASOURCE_URL=${DB_URL}
      - DATASOURCE_USERNAME=${DB_USER}
      - DATASOURCE_PASSWORD=${DB_PASSWORD}
    depends_on:
      postgres-db:
        condition: service_healthy
    networks:
      - hospital-network

  #Histórico
  historical:
    build:
      context: .
      dockerfile: Dockerfile.historical
    container_name: historical
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - DATASOURCE_URL=${DB_URL}
      - DATASOURCE_USERNAME=${DB_USER}
      - DATASOURCE_PASSWORD=${DB_PASSWORD}
    depends_on:
      postgres-db:
        condition: service_healthy
    networks:
      - hospital-network


  #Agendamento
  schedule-api:
    build:
      context: .
      dockerfile: Dockerfile.schedule-api
    container_name: schedule-api
    depends_on:
      postgres-db:
        condition: service_healthy
      kafka:
        condition: service_started
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - DATASOURCE_URL=${DB_URL}
      - DATASOURCE_USERNAME=${DB_USER}
      - DATASOURCE_PASSWORD=${DB_PASSWORD}
    networks:
      - hospital-network

  # Notificação
  notification-api:
    build:
      context: .
      dockerfile: Dockerfile.notification-api
    container_name: notification-api
    ports:
      - "8084:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - MAIL_HOST=${MAIL_HOST}
      - MAIL_PORT=${MAIL_PORT}
      - MAIL_USERNAME=${MAIL_USERNAME}
      - MAIL_PASSWORD=${MAIL_PASSWORD}
    depends_on:
      - kafka
    networks:
      - hospital-network

  # Gateway
  gateway:
    build:
      context: .
      dockerfile: Dockerfile.gateway
    container_name: gateway
    ports:
      - "8089:8089"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - GRPC_AUTHENTICATION_API_URL=${GRPC_AUTHENTICATION_API}
      - GRPC_SCHEDULE_API_URL=${GRPC_SCHEDULE_API}
      - GRPC_HISTORICAL_API_URL=${GRPC_HISTORICAL_API}
    depends_on:
      - authentication-api
      - schedule-api
      - historical
    networks:
      - hospital-network

  #Apache Kafka e Zookeeper
  zookeeper:
    image: confluentinc/cp-zookeeper:7.0.1
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - hospital-network

  kafka:
    image: confluentinc/cp-kafka:7.0.1
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://kafka:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    networks:
      - hospital-network

volumes:
  postgres-data:

networks:
  hospital-network:
    driver: bridge