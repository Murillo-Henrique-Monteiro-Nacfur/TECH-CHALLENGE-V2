scalar LocalDateTime

enum UserType {
    ADMIN
    DOCTOR
    NURSE
    PATIENT
}
enum Role {
    DOCTOR
    NURSE
    PATIENT
}
#appointments types
enum AppointmentStatus {
    SCHEDULED
    COMPLETED
    CANCELED
}

type Appointment {
    id: ID!
    patient: User!
    doctor: User!
    date: String!
    time: String!
    status: AppointmentStatus!
}

type AppointmentCreatedResponse {
    appointmentId: ID!
    success: Boolean!
    message: String
}
input AppointmentCreateRequestInput {
    doctorUserId: ID!
    patientUserId: ID!
    dateHourScheduled: LocalDateTime!
    dateHourStart: LocalDateTime!
    dateHourEnd: LocalDateTime!
    information: String!
}
#appointments types

type User {
    id: ID!
    name: String!
    email: String!
    userType: UserType!
}
type UserRoles {
    roles: [Role!]!
    userId: ID!
}
type CreateUserResponse {
    userId: ID!
    success: Boolean!
    message: String
}
extend type Query {
    getUserById(userId: ID!): User
    getUsers: [User!]!
    getUserRoles(userId: ID!): UserRoles
    getAppointments: [Appointment!]!
    getAppointment(id: ID!): Appointment
    getAppointmentsByUser(userId: ID!): [Appointment!]!
}
type LoginResponse {
    token: String!
}
extend type Mutation {
    login(username: String!, password: String!): LoginResponse!
    createUser(username: String!, email: String!, userType: UserType!): CreateUserResponse!
    assignRolesToUser(userId: ID!, roles: [Role!]!): UserRoles!
    createAppointment(input: AppointmentCreateRequestInput!): AppointmentCreatedResponse
    updateAppointmentStatus(appointmentId: ID!, status: AppointmentStatus!): Appointment!
    cancelAppointment(appointmentId: ID!): Appointment!
}